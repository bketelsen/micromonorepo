// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: stringsvc/strings.proto

package stringsvc

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Tools service

type ToolsService interface {
	Upper(ctx context.Context, in *UpperRequest, opts ...client.CallOption) (*UpperResponse, error)
}

type toolsService struct {
	c    client.Client
	name string
}

func NewToolsService(name string, c client.Client) ToolsService {
	return &toolsService{
		c:    c,
		name: name,
	}
}

func (c *toolsService) Upper(ctx context.Context, in *UpperRequest, opts ...client.CallOption) (*UpperResponse, error) {
	req := c.c.NewRequest(c.name, "Tools.Upper", in)
	out := new(UpperResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tools service

type ToolsHandler interface {
	Upper(context.Context, *UpperRequest, *UpperResponse) error
}

func RegisterToolsHandler(s server.Server, hdlr ToolsHandler, opts ...server.HandlerOption) error {
	type tools interface {
		Upper(ctx context.Context, in *UpperRequest, out *UpperResponse) error
	}
	type Tools struct {
		tools
	}
	h := &toolsHandler{hdlr}
	return s.Handle(s.NewHandler(&Tools{h}, opts...))
}

type toolsHandler struct {
	ToolsHandler
}

func (h *toolsHandler) Upper(ctx context.Context, in *UpperRequest, out *UpperResponse) error {
	return h.ToolsHandler.Upper(ctx, in, out)
}
